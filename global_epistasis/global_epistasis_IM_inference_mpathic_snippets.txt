###########################
###### GB1 inference ######
###########################

# note: to load models, .txt works better than .csv

import mpathic as mpa
# load data from file
gb1_dataset = mpa.io.load_dataset('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_gb1/GB1_mpathic_format_full.txt',seq_type='protein')
gb1_learned_model = mpa.io.load_model('learn_model_gb1_gauge_fixed_rescaled.txt')
evaluated_model_full = mpa.EvaluateModel(dataset_df = gb1_dataset, model_df=gb1_learned_model)

# learn model
learn_gb1_model_sampled = mpa.LearnModel(df = gb1_dataset, lm='IM',verbose=True,iteration=1000,burnin=10)

learn_gb1_model_full = mpa.LearnModel(df = gb1_dataset, lm='IM',verbose=True,iteration=1000,burnin=10)
#learn_gb1_model_full = mpa.LearnModel(df = gb1_dataset_full, lm='IM',verbose=True,iteration=1100)

# write learned model to file
# learn_gb1_model_full.output_df.to_csv('GB1_learned_model_IM_full.csv',sep='\t')

# model dataframe
model_df = learn_gb1_model_full.output_df.copy()

# evaluate model
evaluated_model_full = mpa.EvaluateModel(dataset_df = gb1_dataset_full, model_df=model_df)


# write evaluated model to file
# evaluated_model_full.out_df.to_csv('evaluated_model_full.csv',sep='\t')


### gb1 down sampled inference

import mpathic as mpa
# load data from file
gb1_dataset = mpa.io.load_dataset('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_gb1/GB1_mpathic_input_down_sampled.txt',seq_type='protein')
learn_gb1_model_down_sampled = mpa.LearnModel(df = gb1_dataset, lm='IM',verbose=True,iteration=21000,burnin=1000)


# evaluate model
gb1_dataset = mpa.io.load_dataset('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_gb1/GB1_mpathic_format_full.txt',seq_type='protein')
gb1_learned_model = mpa.io.load_model('learn_model_gb1_gauge_fixed_rescaled_down_sampled.txt')
evaluated_model_down_sampled = mpa.EvaluateModel(dataset_df = gb1_dataset, model_df=gb1_learned_model)

evaluated_model_down_sampled.out_df.to_csv('evaluated_model_down_sampled.csv',sep='\t')


###########################
###### GFP inference ######
###########################

import mpathic as mpa
gfp_dataset = mpa.io.load_dataset('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_gfp/gfp_input_to_mpathic_full.txt',seq_type='protein')
learn_gfp_model = mpa.LearnModel(df = gfp_dataset, lm='IM',verbose=True,iteration=1000,burnin=100)
#learn_gfp_model = mpa.LearnModel(df = gfp_dataset, lm='IM',verbose=True,iteration=11000,burnin=1000)
learn_gfp_model.output_df.to_csv('learn_gfp_model.csv',sep='\t')

# load learned model from file and evaluate on sequences
import mpathic as mpa
gfp_learned_model = mpa.io.load_model('learn_model_gfp.txt')
#gfp_learned_model = mpa.io.load_model('learn_model_gfp_gauge_fixed.txt')
gfp_dataset = mpa.io.load_dataset('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_gfp/gfp_input_to_mpathic_full.txt',seq_type='protein')
evaluated_model = mpa.EvaluateModel(dataset_df = gfp_dataset, model_df=gfp_learned_model)
evaluated_model.out_df.to_csv('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_gfp/evaluated_model_gfp.csv',sep='\t')


###### GFP inference: no spurious seqs ######

import mpathic as mpa
#gfp_dataset = mpa.io.load_dataset('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_gfp/gfp_input_to_mpathic_no_spurious_seqs.txt',seq_type='protein')
gfp_dataset = mpa.io.load_dataset('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_gfp/gfp_input_to_mpathic_full.txt',seq_type='protein')
learn_gfp_model = mpa.LearnModel(df = gfp_dataset, lm='IM',verbose=True,iteration=100000,burnin=1000, initialize='custom')
learn_gfp_model.output_df.to_csv('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_gfp/learn_gfp_model_NN_init1.csv',sep='\t')

learn_gfp_model = mpa.LearnModel(df = gfp_dataset, lm='IM',verbose=True,iteration=1000,burnin=100, initialize='rand')
learn_gfp_model.output_df.to_csv('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_gfp/learn_gfp_model_no_spurious_seqs.csv',sep='\t')

# load learned model from file and evaluate on sequences

import mpathic as mpa
gfp_learned_model = mpa.io.load_model('learn_model_gfp_gauge_no_spurious_seqs.txt')
#gfp_dataset = mpa.io.load_dataset('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_gfp/gfp_input_to_mpathic_full.txt',seq_type='protein')
gfp_dataset = mpa.io.load_dataset('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_gfp/gfp_input_to_mpathic_no_spurious_seqs.txt',seq_type='protein')
evaluated_model = mpa.EvaluateModel(dataset_df = gfp_dataset, model_df=gfp_learned_model)
evaluated_model.out_df.to_csv('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_gfp/evaluated_model_gfp_no_spurious_seqs.csv',sep='\t')

## evaluate on non spurious sequences
import mpathic as mpa
gfp_dataset = mpa.io.load_dataset('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_gfp/gfp_input_to_mpathic_no_spurious_seqs.txt',seq_type='protein')
learn_gfp_model = mpa.LearnModel(df = gfp_dataset, lm='IM',verbose=True,iteration=11000,burnin=1000)
gfp_learned_model = mpa.io.load_model('learn_model_gfp_gauge_no_spurious_seqs.txt')
evaluated_model = mpa.EvaluateModel(dataset_df = gfp_dataset, model_df=gfp_learned_model)
evaluated_model.out_df.to_csv('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_gfp/evaluated_model_gfp_no_spurious_seqs.csv',sep='\t')

# load learned model (from Neural Net) from file and evaluate on sequences

import mpathic as mpa
gfp_learned_model = mpa.io.load_model('learn_model_gfp_NN.txt')
gfp_dataset = mpa.io.load_dataset('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_gfp/gfp_input_to_mpathic_full.txt',seq_type='protein')
evaluated_model = mpa.EvaluateModel(dataset_df = gfp_dataset, model_df=gfp_learned_model)
evaluated_model.out_df.to_csv('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_gfp/evaluated_model_NN.csv',sep='\t')



##################################
###### rna splice inference ######
##################################


import mpathic as mpa
rna_dataset = mpa.io.load_dataset('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/rna_splice_mpathic.txt',seq_type='rna')
learn_rna_model = mpa.LearnModel(df = rna_dataset, lm='IM',verbose=True,iteration=10000,burnin=10)
#learn_rna_model = mpa.LearnModel(df = rna_dataset, lm='LS',verbose=True)
#learn_rna_model.output_df.to_csv('RNA_learned_model_IM.csv',sep='\t')

model_df = learn_rna_model.output_df.copy()
evaluated_rna_model = mpa.EvaluateModel(dataset_df = rna_dataset, model_df=model_df)
evaluated_rna_model.out_df.to_csv('evaluated_rna_model_gf_20_ct.csv',sep='\t')

# rna splice inference -- balanced val seqs

import mpathic as mpa

# load dataset
rna_dataset = mpa.io.load_dataset('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/rna_splice_mpathic_balanced_val.txt',seq_type='rna')

# learn model
learn_rna_model = mpa.LearnModel(df = rna_dataset, lm='IM',verbose=True,iteration=12000,burnin=1000)
learn_rna_model.output_df.to_csv('RNA_learned_model_balanced_IM.csv',sep='\t')

# evaluate model
model_df = learn_rna_model.output_df.copy()
evaluated_rna_model = mpa.EvaluateModel(dataset_df = rna_dataset, model_df=model_df)
evaluated_rna_model.out_df.to_csv('evaluated_rna_model_gf_balanced_val_20_ct.csv',sep='\t')

#learn_rna_model = mpa.LearnModel(df = rna_dataset, lm='LS',verbose=True)
#learn_rna_model.output_df.to_csv('RNA_learned_model_IM.csv',sep='\t')

### rna splice inference -- 7 replicates

import mpathic as mpa
rna_dataset = mpa.io.load_dataset('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_RNA_splicing/input_to_mpathic/rna_mpathic_7_replicates.txt',seq_type='rna')
learn_rna_model = mpa.LearnModel(df = rna_dataset, lm='IM',verbose=True,iteration=10000,burnin=10)
learn_rna_model.output_df.to_csv('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_RNA_splicing/RNA_learned_model_7_replicates_IM.csv',sep='\t')

model_df = learn_rna_model.output_df.copy()
evaluated_rna_model = mpa.EvaluateModel(dataset_df = rna_dataset, model_df=model_df)
evaluated_rna_model.out_df.to_csv('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_RNA_splicing/evaluated_rna_model_7_replicates_val_20_ct.csv',sep='\t')

### rna splice inference -- less than 7 replicates

import mpathic as mpa
rna_dataset = mpa.io.load_dataset('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_RNA_splicing/input_to_mpathic/rna_mpathic_less_than_7_replicates.txt',seq_type='rna')
learn_rna_model = mpa.LearnModel(df = rna_dataset, lm='IM',verbose=True,iteration=10000,burnin=10)
learn_rna_model.output_df.to_csv('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_RNA_splicing/RNA_learned_model_less_than_7_replicates_IM.csv',sep='\t')

model_df = learn_rna_model.output_df.copy()
evaluated_rna_model = mpa.EvaluateModel(dataset_df = rna_dataset, model_df=model_df)
evaluated_rna_model.out_df.to_csv('./mpathic/data/rnap_convnet/ANN_Logisitc_Regression/global_epistasis_RNA_splicing/evaluated_rna_model_less_than_7_replicates_val_20_ct.csv',sep='\t')



####

# read model
import pandas as pd
model_df = pd.read_csv('.//mpathic/data/rnap_convnet/ANN_Logisitc_Regression/RNA_learned_model_IM_gf.csv')


# evaluated rna model

### sort seq inference
import mpathic as mpa
sort_seq_data = mpa.io.load_dataset("./mpathic/data/sortseq/full-0/data.txt")
sort_seq_learn_model = mpa.LearnModel(df = sort_seq_data, lm='IM',verbose=True,iteration=10000,burnin=100 )
sort_seq_learn_model.output_df.to_csv('sort_seq_IM_model.csv',sep='\t')


sort_seq_learn_model.output_df.to_csv('sort_seq_LS_model.csv',sep='\t')


### learn model ARS 317 exp 5


exp_5_dataset = mpa.io.load_dataset('./mpathic/data/19.01.31_for_mi_max/exp_5_counts_mpathic.txt')

import mpathic as mpa
# load data
exp_5_dataset = mpa.io.load_dataset('./19.01.31_for_mi_max/exp_5_counts_mpathic.txt')
# learn model using IM
#learn_exp_5_model = mpa.LearnModel(df=exp_5_dataset, lm='IM', verbose =True, iteration=11000,burnin=1000)
learn_exp_5_model = mpa.LearnModel(df=exp_5_dataset, lm='IM', verbose =False, iteration=11000,burnin=1000)
# see learned model df
learn_exp_5_model.output_df.head()

### learn model ARS 317 exp 6

import mpathic as mpa
exp_6_dataset = mpa.io.load_dataset('./mpathic/data/19.01.31_for_mi_max/exp_6_counts_mpathic.txt')
learn_exp_6_model = mpa.LearnModel(df=exp_6_dataset, lm='IM', verbose =True, iteration=10000,burnin=10)

